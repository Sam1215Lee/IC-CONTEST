module LCD_CTRL(clk, reset, cmd, cmd_valid, IROM_Q, IROM_rd, IROM_A, IRAM_valid, IRAM_D, IRAM_A, busy, done);
input clk;
input reset;
input [3:0] cmd;
input cmd_valid;
input [7:0] IROM_Q;
output reg IROM_rd;
output reg [5:0] IROM_A;
output reg IRAM_valid;
output reg [7:0] IRAM_D;
output reg [5:0] IRAM_A;
output reg busy;
output reg done;

reg [2:0] col;
reg [2:0] row;
reg [7:0] img_buff[0:63];
reg [3:0] cmd_reg;

reg cur_state;
reg next_state;

// state
parameter WAIT_CMD = 1'b0,
          PROCESS = 1'b1;

// cmd
parameter Write = 4'd0,
          Shift_Up = 4'd1,
          Shift_Down = 4'd2,
          Shift_Left = 4'd3,
          Shift_Right = 4'd4,
          Max = 4'd5,
          Min = 4'd6,
          Average = 4'd7,
          Counterclockwise_rotate = 4'd8,
          Clockwise_rotate = 4'd9,
          Mirror_X = 4'd10,
          Mirror_Y = 4'd11,
          Load_Data = 4'd12;

//out_pos
reg [5:0] out_pos, P0, P1, P2, P3;
reg [9:0] avg;

// next-state logic
always@(*)
begin
    case(cur_state)
    WAIT_CMD:
    begin
        if(cmd_valid)
         next_state = PROCESS;
        else
         next_state = WAIT_CMD;
    end
    PROCESS:
    begin
        if((cmd_reg == Write) && (IRAM_A == 6'd63))
         next_state = WAIT_CMD;
        else
         next_state = PROCESS;
    end
    endcase
end

// state-register
always@(posedge clk or posedge reset)
begin
    if(reset)
     cur_state <= WAIT_CMD;
    else
     cur_state <= next_state;
end

// output logic
always@(*)
begin
    out_pos = (row << 3) + col;
    P0 = out_pos - 6'd9;
    P1 = out_pos - 6'd8;
    P2 = out_pos - 6'd1;
    P3 = out_pos;
end

// datapath
always@(posedge clk)
begin
    if(reset)
    begin
        IROM_rd <= 1'b1;
        IROM_A <= 6'd0;
        row <= 3'd4;
        col <= 3'd4;
        IRAM_D <= 8'd0;
        IRAM_A <= 6'd0;
        IRAM_valid <= 1'b0;
        busy <= 1'b1;
    end
    else
    begin
        case(cur_state)
        WAIT_CMD:
        begin
            if(cmd_valid)
            begin
                cmd_reg <= cmd;
                busy <= 1'b1;
            end

            if(IROM_A == 6'd63)
            begin 
                IROM_rd <= 1'b0;
                busy <= 1'b0;
            end
            else
            begin
                IROM_A <= IROM_A + 6'd1;
            end
            img_buff[IROM_A] <= IROM_Q;

            IRAM_valid <= 1'b0;
        end
        PROCESS:
        begin
            case(cmd_reg)
            Write:
            begin
                IRAM_D <= img_buff[IRAM_A + 1];
                IRAM_valid <= 1'b1;
                if(IRAM_A == 6'd63)
                begin
                    IRAM_valid <= 1'b0;
                    busy <= 1'b0;
                    done <= 1'b1;
                end
                else
                begin
                    IRAM_A <= IRAM_A + 6'd1;
                end
            end
            Shift_Up:
            begin
                if(row <= 3'd1)
                begin
                 row <= row;
                end
                else 
                begin
                 row <= row - 3'd1;
                end
                busy <= 1'b0;
            end
            Shift_Down:
            begin
                if(row >= 3'd7)
                begin
                    row <= row;
                end
                else
                begin
                    row <= row + 3'd1;
                end
                busy <= 1'b0;
            end
            Shift_Left: 
            begin
                if(col <= 3'd1)
                begin
                    col <= col;
                end
                else
                begin
                    col <= col - 3'd1;
                end
                busy <= 1'b0;
            end
            Shift_Right:
            begin
                if(col >= 3'd7)
                begin
                    col <= col;
                end
                else
                begin
                    col <= col + 3'd1;
                end
                busy <= 1'b0;
            end
            Max:
            begin
                if((img_buff[P0] >= img_buff[P1]) && (img_buff[P0] >= img_buff[P2]) && (img_buff[P0] >= img_buff[P3]))
                begin
                    img_buff[P1] <= img_buff[P0];
                    img_buff[P2] <= img_buff[P0];
                    img_buff[P3] <= img_buff[P0];
                end
                else if((img_buff[P1] >= img_buff[P0]) && (img_buff[P1] >= img_buff[P2]) && (img_buff[P1] >= img_buff[P3]))
                begin
                    img_buff[P0] <= img_buff[P1];
                    img_buff[P2] <= img_buff[P1];
                    img_buff[P3] <= img_buff[P1];
                end
                else if((img_buff[P2] >= img_buff[P0]) && (img_buff[P2] >= img_buff[P1]) && (img_buff[P2] >= img_buff[P3]))
                begin
                    img_buff[P0] <= img_buff[P2];
                    img_buff[P1] <= img_buff[P2];
                    img_buff[P3] <= img_buff[P2];
                end 
                else if((img_buff[P3] >= img_buff[P0]) && (img_buff[P3] >= img_buff[P1]) && (img_buff[P3] >= img_buff[P2]))
                begin
                    img_buff[P0] <= img_buff[P3];
                    img_buff[P1] <= img_buff[P3];
                    img_buff[P2] <= img_buff[P3];
                end
                busy <= 1'b0;
            end
            Min:
            begin
                if((img_buff[P0] <= img_buff[P1]) && (img_buff[P0] <= img_buff[P2]) && (img_buff[P0] <= img_buff[P3]))
                begin
                    img_buff[P1] <= img_buff[P0];
                    img_buff[P2] <= img_buff[P0];
                    img_buff[P3] <= img_buff[P0];
                end
                else if((img_buff[P1] <= img_buff[P0]) && (img_buff[P1] <= img_buff[P2]) && (img_buff[P1] <= img_buff[P3]))
                begin
                    img_buff[P0] <= img_buff[P1];
                    img_buff[P2] <= img_buff[P1];
                    img_buff[P3] <= img_buff[P1];
                end
                else if((img_buff[P2] <= img_buff[P0]) && (img_buff[P2] <= img_buff[P1]) && (img_buff[P2] <= img_buff[P3]))
                begin
                    img_buff[P0] <= img_buff[P2];
                    img_buff[P1] <= img_buff[P2];
                    img_buff[P3] <= img_buff[P2];
                end
                else if((img_buff[P3] <= img_buff[P0]) && (img_buff[P3] <= img_buff[P1]) && (img_buff[P3] <= img_buff[P2]))
                begin
                    img_buff[P0] <= img_buff[P3];
                    img_buff[P1] <= img_buff[P3];
                    img_buff[P2] <= img_buff[P3];
                end
                busy <= 1'b0;
            end
            Average:
            begin
                avg <= ((img_buff[P0] + img_buff[P1]) + (img_buff[P2] + img_buff[P3])) >> 2;
                img_buff[P0] <= avg[9:2];
                img_buff[P1] <= avg[9:2];
                img_buff[P2] <= avg[9:2];
                img_buff[P3] <= avg[9:2];
                busy <= 1'b0;
            end
            Counterclockwise_rotate:
            begin
                img_buff[P0] <= img_buff[P1];
                img_buff[P1] <= img_buff[P3];
                img_buff[P3] <= img_buff[P2];
                img_buff[P2] <= img_buff[P0];
                busy <= 1'b0;
            end
            Clockwise_rotate:
            begin
                img_buff[P1] <= img_buff[P0];
                img_buff[P3] <= img_buff[P1];
                img_buff[P2] <= img_buff[P3];
                img_buff[P0] <= img_buff[P2];
                busy <= 1'b0;
            end
            Mirror_X:
            begin
                img_buff[P0] <= img_buff[P2];
                img_buff[P1] <= img_buff[P3];
                img_buff[P2] <= img_buff[P0];
                img_buff[P3] <= img_buff[P1];
                busy <= 1'b0;
            end
            Mirror_Y:
            begin
                img_buff[P0] <= img_buff[P1];
                img_buff[P1] <= img_buff[P0];
                img_buff[P2] <= img_buff[P3];
                img_buff[P3] <= img_buff[P2];
                busy <= 1'b0;
            end
            endcase
        end
        endcase
    end
end
endmodule



